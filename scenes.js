const {Scenes} = require('telegraf')
//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—Ä–∫—É–ø
const getMainMenu = require('./keybords.js')

//- text
const all_markup_text = require('./src/main_text');
//const { text } = require("telegraf/typings/button");
const phone_ru_mark = all_markup_text.phone_ru_text
const payments_mark_text = all_markup_text.payments_text
const avto_markup_text = all_markup_text.avto_text
const fn_name_text = all_markup_text.first_name_text
const nick_mark_text = all_markup_text.nick_text
const adres_mark_text = all_markup_text.adres_text
const cloud_mark_text = all_markup_text.cloud_text
const docs_mark_text = all_markup_text.docs_text
const poiskovik_mark_text = all_markup_text.poiskovik_text
const biometria_mark_text = all_markup_text.biometria_text
const acckount_mark_text = all_markup_text.acckount_text
const bazi_mark_text = all_markup_text.bazi_text
const email_mark_text = all_markup_text.email_text
const qwert_text = all_markup_text.qwert_text

module.exports = {

    start_scene () {

        const starts = new Scenes.BaseScene('starts')

        starts.enter((ctx)=> {
            //--–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    ctx.telegram.getChatMember('@efil_xam', ctx.chat.id )
    .then(s => {
        if(s.status === 'left') {
    //-- –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ctx.telegram.sendMessage(ctx.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!',
    {
        reply_markup: {
            inline_keyboard: [
                //- –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–µ—Ä–µ–∫—Ç –Ω–∞ –∫–∞–Ω–∞–ª
               [{text:"–ù–∞—à –∫–∞–Ω–∞–ª\n", callback_data: "LK"},
               //-- –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
               {text:"–Ø, –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data: "KK"}]
            
           ]
        }
    });
    } else {
        //ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 1 ", enter('menus'))
        ctx.scene.enter('menus')
    }

        console.log('logs', s.status)
    })
    .catch(e => {
        console.log('error', e)
    })
        })

        //--—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        starts.on('text', (ctx)=>{
           ctx.reply('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏')
            
        })
        //-- —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        starts.action('LK', (ctx)=> {
            ctx.replyWithHTML("https://t.me/efil_xam")
        })
        starts.action('KK', (ctx)=> {
              //--–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        ctx.telegram.getChatMember('@efil_xam', ctx.chat.id )
        .then(s => {
    if(s.status === 'left') {
        //-- –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ctx.telegram.sendMessage(ctx.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!',
        {
            reply_markup: {
                inline_keyboard: [
                    //- –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–µ—Ä–µ–∫—Ç –Ω–∞ –∫–∞–Ω–∞–ª
                   [{text:"–ù–∞—à –∫–∞–Ω–∞–ª\n", callback_data: "LK"},
                   //-- –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                   {text:"–Ø, –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data: "KK"}]
                
               ]
            }
        });
        } else {
            //-- —Ç—É—Ç –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–ª—é—Å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Ä–∫—É–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            //ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", enter('menus'))
            ctx.scene.enter('menus')

        }
    
            console.log('logs', s.status)
        })
        .catch(e => {
            console.log('error', e)
        })
        
        })
        return starts
    },

    menu_scene () {

        const menus = new Scenes.BaseScene('menus')

        menus.enter((ctx)=> {
            ctx.reply('–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ ?', getMainMenu())
               
        })
        menus.on('text', (ctx)=>{
            const vvod = ctx.message.text
                    
                    
               if(vvod==='üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'){//3
                   
                 //await ctx.deleteMessage(j)
               
                  
                  ctx.replyWithHTML(phone_ru_mark)
                 
                 
                 //my_inline(ctx, all_markup_text.tutu_text, all_markup_text.third_keyboard)
                 
                 
               } 
                else if(vvod === 'üí∞–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞'){//6
                  
           
                   ctx.replyWithHTML(payments_mark_text )
                  
                  
               } else if(vvod === 'üöó –ê–≤—Ç–æ'){
                   ctx.replyWithHTML(avto_markup_text)
               } else if(vvod === 'üë® –§–ò–û'){
                   ctx.replyWithHTML(fn_name_text)
   
               } else if(vvod === '–ù–∏–∫'){
                   ctx.replyWithHTML(nick_mark_text)
               
               } else if(vvod === 'üè° –ê–¥—Ä–µ—Å'){
                   ctx.replyWithHTML(adres_mark_text)

               } else if(vvod === '–û–±–ª–æ–∫–æ'){
                   ctx.replyWithHTML(cloud_mark_text)
                   
               } else if(vvod === '–î–æ–∫—É–º–µ–Ω—ÇüìÑ'){
                   ctx.replyWithHTML(docs_mark_text)
                  
               }
               else if(vvod === 'üîç–ü–æ–∏—Å–∫–æ–≤–∏–∫–∏'){
                   ctx.replyWithHTML(poiskovik_mark_text)
                   
               }
               else if(vvod === 'üë± –ë–∏–æ–º–µ—Ç—Ä–∏—è'){
                   ctx.replyWithHTML(biometria_mark_text)
                  
               }
               else if(vvod === '–ê–∫–∫–∞—É–Ω—Ç'){
                   ctx.replyWithHTML(acckount_mark_text)
                   
               }
               else if(vvod === '–ë–∞–∑—ã üóÑ'){
                   ctx.replyWithHTML(bazi_mark_text)
                  
               }
               else if(vvod === 'E-mailüìß'){
                   ctx.replyWithHTML(email_mark_text)
                
               }
               else if(vvod === '–ü–∞—Ä–æ–ª—å üî•'){
                   ctx.replyWithHTML(qwert_text)
                   
               }
               else if(vvod === '–¢–µ–∫—Å—Ç ‚ÄãÔøΩ'){
                   ctx.replyWithHTML(all_markup_text.text_mark_text)
                   
               }
               else if(vvod === '–¢—Ä–µ–∫–µ—Äüíª'){
                   ctx.replyWithHTML(all_markup_text.trecer_text)
                   
               }
               else if(vvod === '–î–æ–º–µ–Ωüó∫'){
                   ctx.replyWithHTML(all_markup_text.domains_text)
                   
               }
               else if(vvod === '–ß–µ–∫–∏ üí∂'){
                   ctx.replyWithHTML(all_markup_text.cheki_text)
                   
               }
               else if(vvod === 'üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'){
                   ctx.replyWithHTML(all_markup_text.toolsing_text)
                   
               }
               else if(vvod === '–§–∞–π–ª‚å®Ô∏è'){
                   ctx.replyWithHTML(all_markup_text.fails_text)
                   
               }
               else if(vvod === '–°–∏–º–∫–∏'){
                   ctx.replyWithHTML(all_markup_text.simki_text)
                   
               }
               else if(vvod === '–°–∞–π—Ç'){
                   ctx.replyWithHTML(all_markup_text.site_mark_text)
                   
               }
               else if(vvod === 'üîô –ù–∞–∑–∞–¥'){
                   ctx.scene.enter('starts')
               }
               else if(vvod === 'üòé–ö–æ–Ω—Ç–∞–∫—Ç—ã'){
                   ctx.scene.enter('sozd')

               } else if(vvod === '/start'){
                   ctx.scene.enter('starts')

               } else if(vvod === '/help'){
                   ctx.scene.enter('help')
               }
                else {
                   console.log('ochibka menus scene')
                       ctx.replyWithHTML(all_markup_text.pusto_text)
                    }

                       
            
        
        })
        return menus
    },
    
    help_scene() {

        const helps = new Scenes.BaseScene('help')
        helps.enter( async (ctx)=> {
            ctx.replyWithHTML(all_markup_text.opisania_help)
        })
           helps.on('text', (ctx) =>{
            
               const vvods = ctx.message.text
               if(vvods === '/help'){
                ctx.scene.enter('help')
               } else if(vvods === '/start') {
                ctx.scene.enter('starts')
                //ctx.replyWithHTML(all_markup_text.pusto_text)
               } else {
                ctx.replyWithHTML(all_markup_text.pusto_text)
               }
               
           })
           return helps
    },

    sozdal_scene() {

        const sozdal = new Scenes.BaseScene('sozd')
        sozdal.enter(async (ctx)=>{
            ctx.reply('–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–æ–ø—Ä–æ—Å —Ç—É—Ç ?')
        })
        sozdal.on ('text', async (ctx)=>{
            const vods = ctx.message.text
            if(vods){
                await ctx.telegram.sendMessage(2023864971,`–ó–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å '#–≤–æ–ø—Ä–æ—Å':${vods}`)
                    ctx.scene.enter('menus')
               } else {
                ctx.replyWithHTML(all_markup_text.pusto_text)
               }
           
            
        })
        return sozdal
    }
} 
